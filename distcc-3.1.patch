diff -U8 -r distcc-3.1.orig/include_server/compiler_defaults.py distcc-3.1/include_server/compiler_defaults.py
--- distcc-3.1.orig/include_server/compiler_defaults.py	2008-12-02 16:50:31.000000000 -0500
+++ distcc-3.1/include_server/compiler_defaults.py	2009-03-13 13:10:01.000000000 -0400
@@ -71,17 +71,17 @@
     if os.path.islink(prefix):
       return last_prefix, True
     if not os.path.isdir(prefix):
       return last_prefix, False
   return path, False
 
 
 def _MakeLinkFromMirrorToRealLocation(system_dir, client_root, system_links):
-  """Create a link under client root what will resolve to system dir on server.
+  """Create a link under client root that will resolve to system dir on server.
 
   See comments for CompilerDefaults class for rationale.
 
   Args:
     system_dir: a path such as /usr/include or
                 /usr/lib/gcc/i486-linux-gnu/4.0.3/include
     client_root: a path such as /dev/shm/tmpX.include_server-X-1
     system_links: a list of paths under client_root; each denotes a symlink
@@ -224,24 +224,43 @@
              + "command '%s' exited with status '%d'.\n Command output:\n%s") %
              (compiler, language, command, p.returncode, out))
 
   match_obj = re.search(
     r"%s\n(.*?)\n%s"  # don't ask
     % ("#include <...> search starts here:", "End of search list"),
     out,
     re.MULTILINE + re.DOTALL)
+
+  parse_error_msg = \
+           ( "Couldn't determine default system include directories\n"
+           + "for compiler '%s', language '%s':\n"
+           + "couldn't parse output of '%s'.\nReceived:\n%s") % \
+           (compiler, language, command, out)
+
   if match_obj == None:
-    raise NotCoveredError(
-             ( "Couldn't determine default system include directories\n"
-             + "for compiler '%s', language '%s':\n"
-             + "couldn't parse output of '%s'.\nReceived:\n%s") %
-             (compiler, language, command, out))
-  return [ canonical_lookup(directory)
-           for directory in match_obj.group(1).split() ]
+    raise NotCoveredError(parse_error_msg)
+
+  directories = []
+  for directory in match_obj.group(1).split('\n'):
+    if not directory.startswith(' '):
+      raise NotCoveredError(parse_error_msg)
+
+    directory = directory[1:]
+
+    # For our purposes, it doesn't matter whether the directory is a framework
+    # directory (-F) or an include directory (-I).  This only applies when
+    # using Apple GCC.
+    framework_string = ' (framework directory)'
+    if directory.endswith(framework_string):
+      directory = directory[:-len(framework_string)]
+
+    directories.append(canonical_lookup(directory))
+
+  return directories
 
 
 class CompilerDefaults(object):
   """Records and caches the default search dirs and creates symlink farm.
 
   This function works only for gcc, and only some versions at that,
   because we parse the output from gcc to determine the default search dirs.
 
diff -U8 -r distcc-3.1.orig/include_server/parse_command.py distcc-3.1/include_server/parse_command.py
--- distcc-3.1.orig/include_server/parse_command.py	2008-12-02 16:50:31.000000000 -0500
+++ distcc-3.1/include_server/parse_command.py	2009-03-13 13:37:47.000000000 -0400
@@ -50,24 +50,26 @@
     self.before_system_dirs = []
     self.after_system_dirs = []
 
     self.language = 'none'    # equivalent to commandline of '-x none'
     self.isysroot = None
     self.sysroot = None
     self.output_file = None
     self.iprefix = ""
+    self.arch = None
     self.Dopts = []
 
   def set_nostdinc(self): self.nostdinc = True
   def set_language(self, x): self.language = x
   def set_isysroot(self, x): self.isysroot = x
   def set_sysroot(self, x): self.sysroot = x
   def set_outputfile(self, x): self.output_file = x
   def set_iprefix(self, x): self.iprefix = x
+  def set_arch(self, x): self.arch = x
 
 def _SplitMacroArg(arg):
   """Split an arg as found in -Darg
 
   Argument:
     arg: argument
 
   Returns: [arg] if there is no '=' in arg, otherwise [symb, val], where symb is
@@ -91,26 +93,26 @@
 # and, more completely, from the gnu gcc info pages.
 # Each option takes as a value, the function to run on the opt's argument.
 # Below, ps is a ParseState object.
 # TODO(csilvers): check for arg[0] == '=' for iquote, isystem
 CPP_OPTIONS_MAYBE_TWO_WORDS = {
   '-MF':            lambda ps, arg: None,
   '-MT':            lambda ps, arg: None,
   '-MQ':            lambda ps, arg: None,
+  '-arch':          lambda ps, arg: ps.set_arch(arg),
   '-include':       lambda ps, arg: ps.include_files.append(arg),
   '-imacros':       lambda ps, arg: ps.include_files.append(arg),
   '-idirafter':     lambda ps, arg: ps.after_system_dirs.append(arg),
   '-iprefix':       lambda ps, arg: ps.set_iprefix(arg),
   '-iwithprefix':   lambda ps, arg: ps.after_system_dirs.append(
                                       os.path.join(ps.iprefix, arg)),
   '-iwithprefixbefore':  lambda ps, arg: ps.i_dirs.append(
                                            os.path.join(ps.iprefix, arg)),
-#  '-isysroot':      lambda ps, arg: ps.set_isysroot(arg),
-  '-isysroot':      lambda ps, arg: _RaiseNotImplemented('-isysroot'),
+  '-isysroot':      lambda ps, arg: ps.set_isysroot(arg),
   '-imultilib':     lambda ps, arg: _RaiseNotImplemented('-imultilib'),
   '-isystem':       lambda ps, arg: ps.before_system_dirs.append(arg),
   '-iquote':        lambda ps, arg: ps.quote_dirs.append(arg),
 #  '--sysroot=':     lambda ps, arg: ps.set_sysroot(arg),
   '--sysroot=':     lambda ps, arg: None,
 }
 CPP_OPTIONS_MAYBE_TWO_WORDS_FIRST_LETTERS = ('M', 'i', '-')
 # A "compile-time" check to make sure the first-letter list is up-to-date
diff -U8 -r distcc-3.1.orig/src/arg.c distcc-3.1/src/arg.c
--- distcc-3.1.orig/src/arg.c	2008-12-02 16:50:24.000000000 -0500
+++ distcc-3.1/src/arg.c	2009-03-13 13:32:39.000000000 -0400
@@ -206,19 +206,21 @@
                 seen_opt_s = 1;
             } else if (!strcmp(a, "-fprofile-arcs")
                        || !strcmp(a, "-ftest-coverage")) {
                 rs_log_info("compiler will emit profile info; must be local");
                 return EXIT_DISTCC_FAILED;
             } else if (!strcmp(a, "-frepo")) {
                 rs_log_info("compiler will emit .rpo files; must be local");
                 return EXIT_DISTCC_FAILED;
+#if 0
             } else if (str_startswith("-x", a)) {
                 rs_log_info("gcc's -x handling is complex; running locally");
                 return EXIT_DISTCC_FAILED;
+#endif
             } else if (str_startswith("-dr", a)) {
                 rs_log_info("gcc's debug option %s may write extra files; "
                             "running locally", a);
                 return EXIT_DISTCC_FAILED;
             } else if (!strcmp(a, "-c")) {
                 seen_opt_c = 1;
             } else if (!strcmp(a, "-o")) {
                 /* Whatever follows must be the output */
