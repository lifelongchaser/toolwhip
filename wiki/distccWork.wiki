#summary The pending tasks to be done for distcc

The pending tasks for the distcc work
  * -isysroot/--sysroot - tvl taking everything not in include_server at this time.
     * distcc cmdline needs to make sure we only get one of these at a time (mm note: gcc actually accepts multiple -isysroot but only honors the last one.  gcc honors -isysroot over --sysroot for include path purposes regardless of where they appear on the command line relative to one another.)
     * index_server needs to collect it and use it when collecting compiler defaults
        * add another dimension for (i)sysroots or combine them w/ the compiler or arch to build the key for lookup.
     * if distcc is doing cpp on the server:
        * send through the sysroot so the server can match the right sdk on the server
        * map the developer dir into a marker for all argv entries and file/link lists
        * on the server reverse it to the right developer dir
     * if distcc is doing cpp on the client
        * strip.c:dcc_strip_local_args needs to remove the sysroot since it's not needed during the compile
     * open issue
        * do we need to include sdks in the host info, so we only pick a host that has the sdks installed that a compile needs?
  * see if we need to beef up -F support in the include server
     * interleave them with -I
     * teach the include server to look in the Frameworks's Headers dir.
     * question: are we ok with the overhead for frameworks on all platforms since it's in the include_server and we can ifdef it?
  * -iheader/-iframework need to match like -I/-F
  * reintegrate xcodedistcc advertisement via dns_sd (apple)/avahi (linux)
  * what happens if you pass already-preprocessed input like .i and .ii to the include server?
  * move the language bits into helper objects so we don't have to repeat so much in the tests
  * in the symlink farm, we need to handle the dev tools install dir, and when recreating the links on the other machine, make sure they are done as that machine needs them. see the open issue nder isysroot/sysroot
  * remove GNU Make-ism (filter-out) from Makefile, move the logic into configure.  Make -DXCODE_INTEGRATION something that configure knows how to set.
  * Xcode passes the compiler to use to distcc with the developer dir in the path.  This means we need to map between xcode install locations on the compiler also.

nice to have, not critical:
  * DISTCC_HOSTS token to indicate that xcodedistcc zeroconf hosts should be collected, similar to +zeroconf for native distcc zeroconf hosts

done:
  * -x support
     * -x in distcc/distccd -- code and tests added
     * -x in include_server -- parse_command already picks it all up, and compiler_defaults moves it along collecting the system dirs correctly.
  * probably don't need to do anything with these except stop collecting -arch:
     * -arch support in the include_server doesn't seem to do anything w/ what it collects
     * -arch support probably needs to support building >1 arch at a time like gcc does.
  * -include - already worked, added test case
  * double check DashONoSpace_Case since gcc -ofoo -c foo.c seems to work?
  * don't force a .d file to be created on the server since it can conflict w/ more then one -arch option.
  * --hostinfo compiler version reporting
  * fix paths in debug info for Mach-O files
  * finish up --hostinfo - mark

Things to point out to apple
  * the gcc version must also bump if the sdks change in any way due to how system headers are moved over the wire, they need to match between all machines so they see the same headers.
  * When Xcode calls "distccd --host-info localhost" to obtain local system and compiler info, it needs to set the USE_XCODE_SELECT_PATH environment variable.  Presently, it does not, and only gets a list of compilers from the xcode-select path because of a bug (reading uninitialized memory) in their distcc fork.  toolwhip distccd contains a workaround for this (see the __APPLE__ section in distcc/src/dopt.c) which I'd eventually like to remove.

Things to point out to distcc
  * The include_server requirement that client_root contain exactly three components is ludicrous.  Rather than having distcc strip off exactly three components from the beginnings of paths to see inside the client root, the include_server should communicate its client_root back to distcc, so that distcc knows exactly what to strip off.