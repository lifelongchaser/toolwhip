diff -U8 -r usr_include.orig/i386/_types.h usr_include/i386/_types.h
--- usr_include.orig/i386/_types.h	2008-03-25 00:48:04.000000000 -0400
+++ usr_include/i386/_types.h	2009-03-05 22:08:42.000000000 -0500
@@ -38,18 +38,16 @@
 #else	/* !__GNUC__ */
 typedef char			__int8_t;
 #endif	/* !__GNUC__ */
 typedef unsigned char		__uint8_t;
 typedef	short			__int16_t;
 typedef	unsigned short		__uint16_t;
 typedef int			__int32_t;
 typedef unsigned int		__uint32_t;
-typedef long long		__int64_t;
-typedef unsigned long long	__uint64_t;
 
 typedef long			__darwin_intptr_t;
 typedef unsigned int		__darwin_natural_t;
 
 /*
  * The rune type below is declared to be an ``int'' instead of the more natural
  * ``unsigned long'' or ``long''.  Two things are happening here.  It is not
  * unsigned so that EOF (-1) can be naturally assigned to it and used.  Also,
@@ -68,22 +66,25 @@
  */
 
 typedef int			__darwin_ct_rune_t;	/* ct_rune_t */
 
 /*
  * mbstate_t is an opaque object to keep conversion state, during multibyte
  * stream conversions.  The content must not be referenced by user programs.
  */
+#ifndef __mbstate_t_defined
+#define __mbstate_t_defined 1
 typedef union {
 	char		__mbstate8[128];
 	long long	_mbstateL;			/* for alignment */
 } __mbstate_t;
 
 typedef __mbstate_t		__darwin_mbstate_t;	/* mbstate_t */
+#endif
 
 #if defined(__GNUC__) && defined(__PTRDIFF_TYPE__)
 typedef __PTRDIFF_TYPE__	__darwin_ptrdiff_t;	/* ptr1 - ptr2 */
 #else
 typedef int			__darwin_ptrdiff_t;	/* ptr1 - ptr2 */
 #endif /* __GNUC__ */
 
 #if defined(__GNUC__) && defined(__SIZE_TYPE__)
diff -U8 -r usr_include.orig/libkern/_OSByteOrder.h usr_include/libkern/_OSByteOrder.h
--- usr_include.orig/libkern/_OSByteOrder.h	2008-03-25 00:47:34.000000000 -0400
+++ usr_include/libkern/_OSByteOrder.h	2009-03-05 22:08:59.000000000 -0500
@@ -32,17 +32,17 @@
 /*
  * This header is normally included from <libkern/OSByteOrder.h>.  However,
  * <sys/_endian.h> also includes this in the case of little-endian
  * architectures, so that we can map OSByteOrder routines to the hton* and ntoh*
  * macros.  This results in the asymmetry below; we only include
  * <libkern/arch/_OSByteOrder.h> for little-endian architectures.
  */
 
-#include <sys/_types.h>
+#include <sys/types.h>
 
 /* Macros for swapping constant values in the preprocessing stage. */
 #define __DARWIN_OSSwapConstInt16(x) \
     ((__uint16_t)((((__uint16_t)(x) & 0xff00) >> 8) | \
                 (((__uint16_t)(x) & 0x00ff) << 8)))
 
 #define __DARWIN_OSSwapConstInt32(x) \
     ((__uint32_t)((((__uint32_t)(x) & 0xff000000) >> 24) | \
diff -U8 -r usr_include.orig/mach/i386/_structs.h usr_include/mach/i386/_structs.h
--- usr_include.orig/mach/i386/_structs.h	2008-03-25 00:48:00.000000000 -0400
+++ usr_include/mach/i386/_structs.h	2009-03-05 22:08:42.000000000 -0500
@@ -27,16 +27,18 @@
  */
 /*
  * @OSF_COPYRIGHT@
  */
 
 #ifndef	_MACH_I386__STRUCTS_H_
 #define	_MACH_I386__STRUCTS_H_
 
+#include <sys/types.h>
+
 /*
  * i386 is the structure that is exported to user threads for 
  * use in status/mutate calls.  This structure should never change.
  *
  */
 
 #if __DARWIN_UNIX03
 #define	_STRUCT_X86_THREAD_STATE32	struct __darwin_i386_thread_state
diff -U8 -r usr_include.orig/mach/i386/thread_status.h usr_include/mach/i386/thread_status.h
--- usr_include.orig/mach/i386/thread_status.h	2008-03-25 00:47:59.000000000 -0400
+++ usr_include/mach/i386/thread_status.h	2009-03-05 22:08:42.000000000 -0500
@@ -104,16 +104,17 @@
 #define x86_FLOAT_STATE64		5
 #define x86_EXCEPTION_STATE64		6
 #define x86_THREAD_STATE		7
 #define x86_FLOAT_STATE			8
 #define x86_EXCEPTION_STATE		9
 #define x86_DEBUG_STATE32		10
 #define x86_DEBUG_STATE64		11
 #define x86_DEBUG_STATE			12
+#if defined (__i386__) || defined(__x86_64__)
 #define THREAD_STATE_NONE		13
 
 /*
  * Largest state on this machine:
  * (be sure mach/machine/thread_state.h matches!)
  */
 #define THREAD_MACHINE_STATE_MAX	THREAD_STATE_MAX
 
@@ -132,16 +133,17 @@
 	  (x == x86_FLOAT_STATE64)	|| \
 	  (x == x86_EXCEPTION_STATE64)	|| \
 	  (x == x86_DEBUG_STATE64)	|| \
 	  (x == x86_THREAD_STATE)	|| \
 	  (x == x86_FLOAT_STATE)	|| \
 	  (x == x86_EXCEPTION_STATE)	|| \
 	  (x == x86_DEBUG_STATE)	|| \
 	  (x == THREAD_STATE_NONE))
+#endif
 
 struct x86_state_hdr {
 	int	flavor;
 	int	count;
 };
 typedef struct x86_state_hdr x86_state_hdr_t;
 
 /*
@@ -264,18 +266,20 @@
 typedef struct x86_debug_state x86_debug_state_t;
 #define x86_DEBUG_STATE_COUNT ((mach_msg_type_number_t) \
 		(sizeof(x86_debug_state_t)/sizeof(unsigned int)))
 
 /*
  * Machine-independent way for servers and Mach's exception mechanism to
  * choose the most efficient state flavor for exception RPC's:
  */
+#if defined (__i386__) || defined(__x86_64__)
 #define MACHINE_THREAD_STATE		x86_THREAD_STATE
 #define MACHINE_THREAD_STATE_COUNT	x86_THREAD_STATE_COUNT
+#endif
 
 /*
  * when reloading the segment registers on
  * a return out of the kernel, we may take
  * a GeneralProtection or SegmentNotPresent
  * fault if one or more of the segment
  * registers in the saved state was improperly
  * specified via an x86_THREAD_STATE32 call
diff -U8 -r usr_include.orig/mach/ppc/_structs.h usr_include/mach/ppc/_structs.h
--- usr_include.orig/mach/ppc/_structs.h	2008-03-25 00:47:43.000000000 -0400
+++ usr_include/mach/ppc/_structs.h	2009-03-05 22:08:42.000000000 -0500
@@ -131,18 +131,16 @@
 	unsigned int lr;	/* Link register */
 	unsigned int ctr;	/* Count register */
 	unsigned int mq;	/* MQ register (601 only) */
 
 	unsigned int vrsave;	/* Vector Save Register */
 };
 #endif /* __DARWIN_UNIX03 */
 
-#if !defined(_POSIX_C_SOURCE) || defined(_DARWIN_C_SOURCE)
-
 #pragma pack(4)			/* Make sure the structure stays as we defined it */
 
 #if __DARWIN_UNIX03
 #define _STRUCT_PPC_THREAD_STATE64	struct __darwin_ppc_thread_state64
 _STRUCT_PPC_THREAD_STATE64
 {
 	unsigned long long __srr0;	/* Instruction address register (PC) */
 	unsigned long long __srr1;	/* Machine state register (supervisor) */
@@ -231,18 +229,16 @@
 	unsigned long long ctr;		/* Count register */
 
 	unsigned int vrsave;		/* Vector Save Register */
 };
 #endif /* __DARWIN_UNIX03 */
 
 #pragma pack()
 
-#endif /* (_POSIX_C_SOURCE && !_DARWIN_C_SOURCE) */
-
 /* This structure should be double-word aligned for performance */
 
 #if __DARWIN_UNIX03
 #define	_STRUCT_PPC_FLOAT_STATE	struct __darwin_ppc_float_state
 _STRUCT_PPC_FLOAT_STATE
 {
 	double  __fpregs[32];
 
@@ -348,17 +344,16 @@
 	unsigned long dsisr;
 	unsigned long exception;	/* number of powerpc exception taken */
 	unsigned long pad0;		/* align to 16 bytes */
 	unsigned long pad1[4];		/* space in PCB "just in case" */
 #endif
 };
 #endif /* __DARWIN_UNIX03 */
 
-#if !defined(_POSIX_C_SOURCE) || defined(_DARWIN_C_SOURCE)
 #if __DARWIN_UNIX03
 #define _STRUCT_PPC_EXCEPTION_STATE64	struct __darwin_ppc_exception_state64
 _STRUCT_PPC_EXCEPTION_STATE64
 {
 	unsigned long long __dar;	/* Fault registers for coredump */
 #if defined(__LP64__)
 	unsigned int  __dsisr;
 	unsigned int  __exception;	/* number of powerpc exception taken */
@@ -380,13 +375,12 @@
 	unsigned int  pad1[4];		/* space in PCB "just in case" */
 #else
 	unsigned long dsisr;
 	unsigned long exception;	/* number of powerpc exception taken */
 	unsigned long pad1[4];		/* space in PCB "just in case" */
 #endif
 };
 #endif /* __DARWIN_UNIX03 */
-#endif /* (_POSIX_C_SOURCE && !_DARWIN_C_SOURCE) */
 
 #pragma pack()
 
 #endif /* _MACH_PPC__STRUCTS_H_ */
diff -U8 -r usr_include.orig/mach/ppc/thread_status.h usr_include/mach/ppc/thread_status.h
--- usr_include.orig/mach/ppc/thread_status.h	2008-03-25 00:47:43.000000000 -0400
+++ usr_include/mach/ppc/thread_status.h	2009-03-05 22:08:42.000000000 -0500
@@ -42,16 +42,17 @@
  */
 
 #define PPC_THREAD_STATE        1
 #define PPC_FLOAT_STATE         2
 #define PPC_EXCEPTION_STATE		3
 #define PPC_VECTOR_STATE		4
 #define PPC_THREAD_STATE64		5
 #define PPC_EXCEPTION_STATE64	6
+#if defined (__ppc__) || defined (__ppc64__)
 #define THREAD_STATE_NONE		7
 	       
 /*
  * VALID_THREAD_STATE_FLAVOR is a platform specific macro that when passed
  * an exception flavor will return whether that is a defined flavor for
  * that platform.
  * The macro must be manually updated to include all of the valid exception
  * flavors as defined above.
@@ -59,21 +60,20 @@
 #define VALID_THREAD_STATE_FLAVOR(x)       \
         ((x == PPC_THREAD_STATE)        || \
          (x == PPC_FLOAT_STATE)         || \
 	 (x == PPC_EXCEPTION_STATE)     	|| \
          (x == PPC_VECTOR_STATE)        || \
          (x == PPC_THREAD_STATE64)      || \
          (x == PPC_EXCEPTION_STATE64)   || \
          (x == THREAD_STATE_NONE))
+#endif
 
 typedef _STRUCT_PPC_THREAD_STATE	ppc_thread_state_t;
-#if !defined(_POSIX_C_SOURCE) || defined(_DARWIN_C_SOURCE)
 typedef _STRUCT_PPC_THREAD_STATE64	ppc_thread_state64_t;
-#endif /* (_POSIX_C_SOURCE && !_DARWIN_C_SOURCE) */
 typedef _STRUCT_PPC_FLOAT_STATE		ppc_float_state_t;
 typedef _STRUCT_PPC_VECTOR_STATE	ppc_vector_state_t;
 
 /*
  * saved state structure
  *
  * This structure corresponds to the saved state. 
  *
@@ -104,19 +104,17 @@
  * compatiblity.
  */
 
 /* Exception state for 32-bit thread (on 32-bit processor) */
 /* Still available on 64-bit processors, but may fall short */
 /* of covering the full potential state (hi half available). */
 
 typedef _STRUCT_PPC_EXCEPTION_STATE	ppc_exception_state_t;
-#if !defined(_POSIX_C_SOURCE) || defined(_DARWIN_C_SOURCE)
 typedef _STRUCT_PPC_EXCEPTION_STATE64	ppc_exception_state64_t;
-#endif /* (_POSIX_C_SOURCE && !_DARWIN_C_SOURCE) */
 
 /*
  * Save State Flags
  */
 
 #define PPC_THREAD_STATE_COUNT ((mach_msg_type_number_t) \
    (sizeof(ppc_thread_state_t) / sizeof(int)))
 
@@ -134,17 +132,19 @@
 
 #define PPC_VECTOR_STATE_COUNT ((mach_msg_type_number_t) \
    (sizeof(ppc_vector_state_t) / sizeof(int)))
 
 /*
  * Machine-independent way for servers and Mach's exception mechanism to
  * choose the most efficient state flavor for exception RPC's:
  */
+#if defined (__ppc__) || defined (__ppc64__)
 #define MACHINE_THREAD_STATE		PPC_THREAD_STATE
 #define MACHINE_THREAD_STATE_COUNT	PPC_THREAD_STATE_COUNT
 
 /*
  * Largest state on this machine:
  */
 #define THREAD_MACHINE_STATE_MAX	THREAD_STATE_MAX
+#endif
 
 #endif /* _MACH_PPC_THREAD_STATUS_H_ */
